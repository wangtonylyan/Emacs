;; -*- coding: utf-8 -*-

;; <shift-up/down/left/right>

;; 与输入法切换键冲突
;; (global-set-key (kbd "C-S-SPC") 'set-mark-command)
;; (global-unset-key (kbd "C-SPC"))

(unbind-key "C-x f"      ) ;; (set-fill-column)
(unbind-key "C-x C-l"    ) ;; (downcase-region)
(unbind-key "C-x C-u"    ) ;; (upcase-region)
(unbind-key "C-M-v"      ) ;; (scroll-other-window)
(unbind-key "M-s h"      )
(unbind-key "C-x o"      ) ;; (other-window)
(unbind-key "C-x <left>" ) ;; (previous-buffer)
(unbind-key "C-x <right>") ;; (next-buffer)
(unbind-key "M-e"        ) ;; (forward-sentence)
(unbind-key "M-a"        ) ;; (backward-sentence)
(unbind-key "M-{"        ) ;; (forward-paragraph)
(unbind-key "M-}"        ) ;; (backward-paragraph)
(unbind-key "C-M-f"      ) ;; (forward-sexp)
(unbind-key "C-M-b"      ) ;; (backward-sexp)
(unbind-key "C-M-n"      ) ;; (forward-list)
(unbind-key "C-M-p"      ) ;; (backward-list)
(unbind-key "C-M-d"      ) ;; (down-list)
(unbind-key "C-M-u"      ) ;; (backward-up-list)
(unbind-key "C-x d"      ) ;; (dired)

;; 以下部分是重复绑定，目的是便于查阅
(bind-keys ("M-x"            . helm-M-x                )
           ("M-y"            . helm-show-kill-ring     )
           ("C-x C-f"        . helm-find-files         )
           ("C-x C-r"        . helm-recentf            )
           ("C-x b"          . helm-mini               )
           ("C-x C-b"        . helm-buffers-list       )
           ("C-o"            . helm-occur              )
           ("C-S-h"          . windmove-left           )
           ("C-S-l"          . windmove-right          )
           ("C-S-k"          . windmove-up             )
           ("C-S-j"          . windmove-down           )
           ("C-+"            . zoom                    )
           ("<C-wheel-up>"   . text-scale-increase     )
           ("<C-wheel-down>" . text-scale-decrease     )
           ("<C-up>"         . text-scale-increase     )
           ("<C-down>"       . text-scale-decrease     )
           ("C-x C--"        . downcase-region         )
           ("C-x C-="        . upcase-region           )
           ("C-S-a"          . mark-whole-buffer       )
           ("C-q"            . read-only-mode          )
           ("M-!"            . shell-command           )
           ("M-."            . xref-find-definitions   )
           ("M-,"            . xref-pop-marker-stack   )
           ;; ("C-:"         . avy or ace-jump-mode)
           ;; ("C-;"         . avy or ace-jump-mode)
           ;; ("C-\""        . flyspell or flyspell-correct)
           ;; ("C-'"         . flyspell or flyspell-correct)
           :map package-menu-mode-map
           ("r"              . package-menu-refresh    )
           ("R"              . package-refresh-contents)
           )

;; 命令集前缀，以C-c加单个字母为前缀，且全局性key map的前缀互不相同
;; C-c C- :: tabbar
;; C-c c :: helm-gtags
;; C-c , :: CEDET/Semantic
;; C-c . :: CEDET/EDE
(bind-keys ("C-c h" . helm-command-prefix) ;; helm
           ("C-c w" . pkg/hydra/group/window/body) ;; window, windmove, winner, buffer-move, zoom
           ("C-c c" . (lambda () ;; cursor
                        (interactive)
                        (cond
                         ((my/package-enabled-p 'paredit)
                          (pkg/hydra/group/paredit/body))
                         (t
                          (pkg/hydra/group/cursor/body)))))
           ("C-c t" . pkg/hydra/group/directory/body) ;; dired, treemacs, neotree
           ("C-c i" . pkg/hydra/group/highlight/body) ;; highlight, highlight-thing
           ("C-c b" . pkg/hydra/group/bookmark/body) ;; bookmark, bm, helm-bm
           ("C-c d" . pkg/hydra/group/diff/body) ;; ediff, vdiff
           ("C-c o" . pkg/hydra/group/org/body) ;; org
           ("C-c p" . pkg/hydra/group/project/body) ;; projectile, helm-projectile
           )

(defhydra pkg/hydra/group/window (:timeout 10)
  ("+" enlarge-window              "++ <>      " :column "buffer size ")
  ("=" enlarge-window-horizontally "++ ^v      "                       )
  ("_" shrink-window               "-- <>      "                       )
  ("-" shrink-window-horizontally  "-- ^v      "                       )
  ("p" scroll-other-window-down    "scroll up  " :column "scroll other")
  ("n" scroll-other-window         "scroll down"                       )
  ("u" winner-undo                 "undo       " :column "winner      ")
  ("r" winner-redo                 "redo       "                       )
  ("h" buf-move-left               "left       " :column "move buffer ")
  ("l" buf-move-right              "right      "                       )
  ("k" buf-move-up                 "up         "                       )
  ("j" buf-move-down               "down       "                       )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/cursor (:timeout 10)
  ("C-f" forward-char           nil)
  ("C-b" backward-char          nil)
  ("C-n" next-line              nil)
  ("C-p" previous-line          nil)
  ("C-e" move-end-of-line       nil)
  ("C-a" move-beginning-of-line nil)
  ("M-f" forward-word           nil)
  ("M-b" backward-word          nil)
  ("C-l" recenter-top-bottom    nil)
  ("C-q" read-only-mode         nil)
  ("f"   forward-sexp           "->  " :column "expression")
  ("b"   backward-sexp          "<-  "                     )
  ("e"   forward-sentence       "->  " :column "sentence  ")
  ("a"   backward-sentence      "<-  "                     )
  ("n"   forward-paragraph      "->  " :column "paragraph ")
  ("p"   backward-paragraph     "<-  "                     )
  ("j"   down-list              "-> v" :column "tree down ")
  ("l"   up-list                "-> ^" :column "tree up   ")
  ("h"   backward-up-list       "<- ^"                     )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/paredit (:timeout 10)
  ("C-f" forward-char           nil)
  ("C-b" backward-char          nil)
  ("C-n" next-line              nil)
  ("C-p" previous-line          nil)
  ("C-e" move-end-of-line       nil)
  ("C-a" move-beginning-of-line nil)
  ("M-f" forward-word           nil)
  ("M-b" backward-word          nil)
  ("C-l" recenter-top-bottom    nil)
  ("C-q" read-only-mode         nil)
  ("f"   paredit-forward        "->  " :column "expression")
  ("b"   paredit-backward       "<-  "                     )
  ("e"   forward-sentence       "->  " :column "sentence  ")
  ("a"   backward-sentence      "<-  "                     )
  ("n"   forward-paragraph      "->  " :column "paragraph ")
  ("p"   backward-paragraph     "<-  "                     )
  ("j"   paredit-forward-down   "-> v" :column "tree down ")
  ("k"   paredit-backward-down  "<- v"                     )
  ("l"   paredit-forward-up     "-> ^" :column "tree up   ")
  ("h"   paredit-backward-up    "<- ^"                     )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/directory (:timeout 10 :exit t)
  ("d" dired                         "dired   " :column "dired")
  ("t" pkg/hydra/group/treemacs/body "treemacs" :column "tree ")
  ("n" pkg/hydra/group/neotree/body  "neotree "                )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/dired (dired-mode-map "" :timeout 10)
  "
Number of marked: %(pkg/dired/count-marked)

"
  ("C-f" forward-char           nil)
  ("C-b" backward-char          nil)
  ("C-e" move-end-of-line       nil)
  ("C-a" move-beginning-of-line nil)
  ("M-f" forward-word           nil)
  ("M-b" backward-word          nil)
  ("C-l" recenter-top-bottom    nil)
  ("s"       dired-sort-toggle-or-edit    "sort             " :column "show    ")
  ("g"       dired-do-redisplay           "refresh          "                   )
  ("G"       revert-buffer                "revert           "                   )
  ("k"       dired-do-kill-lines          "hide line        "                   )
  ("K"       dired-hide-details-mode      "hide details     "                   )
  ("n,p"     nil                          "next/prev line   " :column "move    ")
  ("n"       dired-next-line              nil                                   )
  ("p"       dired-previous-line          nil                                   )
  ("C-n"     dired-next-line              nil                                   )
  ("C-p"     dired-previous-line          nil                                   )
  ("N,P"     nil                          "next/prev dir    "                   )
  ("N"       dired-next-dirline           nil                                   )
  ("P"       dired-prev-dirline           nil                                   )
  ("o"       dired-goto-file              "goto             "                   )
  ("l"       dired-up-directory           "parent           "                   )
  ("m,M"     nil                          "mark (regexp)    " :column "mark    ")
  ("m"       dired-mark                   nil                                   )
  ("M"       dired-mark-files-regexp      nil                                   )
  ("u,U"     nil                          "unmark (all)     "                   )
  ("u"       dired-unmark                 nil                                   )
  ("U"       dired-unmark-all-marks       nil                                   )
  ("t"       dired-toggle-marks           "toggle (un)marked"                   )
  ("\\M-n,p" nil                          "next/prev marked "                   )
  ("M-n"     dired-next-marked-file       nil                                   )
  ("M-p"     dired-prev-marked-file       nil                                   )
  ("v,V"     nil                          "view/display     " :column "file    ")
  ("v"       dired-view-file              nil                 :exit t           )
  ("V"       dired-display-file           nil                                   )
  ("f,F"     nil                          "open (other)     "                   )
  ("f"       dired-find-file              nil                 :exit t           )
  ("F"       dired-find-file-other-window nil                 :exit t           )
  ("c,C"     nil                          "copy/move        "                   )
  ("c"       dired-do-copy                nil                                   )
  ("C"       dired-do-rename              nil                                   )
  ("d"       dired-flag-file-deletion     "flag delete      " :column "delete  ")
  ("#,~"     nil                          "flag auto/backup "                   )
  ("#"       dired-flag-auto-save-files   nil                                   )
  ("~"       dired-flag-backup-files      nil                                   )
  ("."       dired-clean-directory        "flag clean       "                   )
  ("x"       dired-do-flagged-delete      "delete flagged   "                   )
  ("D"       dired-do-delete              "delete marked    "                   )
  (": m"     dired-do-chmod               "chmod            " :column "property")
  (": o,g"   nil                          "chown/chgrp      "                   )
  (": o"     dired-do-chown               nil                                   )
  (": g"     dired-do-chgrp               nil                                   )
  (": t"     dired-do-touch               "touch            "                   )
  (": d"     dired-create-directory       "create dir       "                   )
  ("!"       dired-do-shell-command       "shell            " :column "external")
  ("&"       dired-do-async-shell-command "shell &          "                   )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/treemacs (:timeout 10 :exit t)
  ("t" pkg/treemacs/select-window    "select       " :column "window")
  ("1" treemacs-delete-other-windows "delete others"                 )
  ("u" treemacs                      nil                             )
  ("F" treemacs-find-file            "find file    " :column "browse")
  ("T" treemacs-find-tag             "find tag     "                 )
  ("B" treemacs-bookmark             "bookmark     "                 )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/neotree (:timeout 10 :exit t)
  ("t" pkg/neotree/toggle "select")
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/highlight (:timeout 10)
  ("i" highlight-symbol-at-point       "at point   " :column "highlight  ")
  ("p" highlight-phrase                "phrase     "                      )
  ("r" highlight-regexp                "regexp     "                      )
  ("l" highlight-lines-matching-regexp "regexp line"                      )
  ("u" unhighlight-regexp              "regexp     " :column "unhighlight")
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/bookmark (:timeout 10)
  ("m" bookmark-set        "set     " :column "bookmark")
  ("d" bookmark-delete     "unset   "                   )
  ("r" bookmark-rename     "rename  "                   )
  ("l" bookmark-bmenu-list "list    "                   )
  ("p" bm-previous         "previous" :column "browse  ")
  ("n" bm-next             "next    "                   )
  ("t" bm-toggle           "toggle  "                   )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/diff (:timeout 10 :exit t)
  ("e" pkg/hydra/group/ediff/body "choose" :column "ediff")
  ("v" pkg/hydra/group/vdiff/body "choose" :column "vdiff")
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/ediff (:timeout 10 :exit t)
  ("f" ediff-files        "2 files  " :column "file  ")
  ("F" ediff-files3       "3 files  "                 )
  ("b" ediff-buffers      "2 buffers" :column "buffer")
  ("B" ediff-buffers3     "3 buffers"                 )
  ("d" ediff-current-file "current  "                 )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/vdiff (:timeout 10 :exit t)
  ("f" vdiff-files        "2 files  " :column "file  ")
  ("F" vdiff-files3       "3 files  "                 )
  ("b" vdiff-buffers      "2 buffers" :column "buffer")
  ("B" vdiff-buffers3     "3 buffers"                 )
  ("d" vdiff-current-file "current  "                 )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/org (:timeout 10 :exit t)
  ("c" org-capture "capture" :column "org mode")
  ("a" org-agenda  "agenda "                   )
  ("q" pkg/hydra/quit nil :exit t))

(defhydra pkg/hydra/group/project (:timeout 10 :exit t)
  "
PROJECT: %(projectile-project-root)

"
  ("h"   helm-projectile                            "helm          " :column "project  ")
  ("p"   helm-projectile-switch-project             "open          "                    )
  ("C-p" projectile-switch-project                  nil                                 )
  ("P"   projectile-switch-open-project             "switch        "                    )
  ("v"   projectile-vc                              "version       "                    )
  ("x"   projectile-remove-known-project            "remove        "                    )
  ("X"   projectile-cleanup-known-projects          "cleanup       "                    )
  ("b"   helm-projectile-switch-to-buffer           "switch        " :column "buffer   ")
  ("C-b" projectile-switch-to-buffer                nil                                 )
  ("k"   projectile-kill-buffers                    "kill          "                    )
  ("f"   helm-projectile-find-file                  "find          " :column "file     ")
  ("C-f" projectile-find-file                       nil                                 )
  ("F"   projectile-find-file-in-known-projects     "find all      "                    )
  ("r"   helm-projectile-recentf                    "recent        "                    )
  ("l"   projectile-find-file-in-directory          "find in dir   "                    )
  ("C-r" projectile-recentf                         nil                                 )
  ("t"   projectile-find-other-file                 "with same name"                    )
  ("d"   helm-projectile-find-dir                   "find          " :column "directory")
  ("C-d" projectile-find-dir                        nil                                 )
  ("D"   projectile-dired                           "dired         "                    )
  ("o"   projectile-multi-occur                     "occur         " :column "symbol   ")
  ("w"   projectile-replace                         "replace       "                    )
  ("O"   helm-projectile-grep                       "grep          "                    )
  ("C-O" projectile-grep                            nil                                 )
  ("!"   projectile-run-shell-command-in-root       "shell         " :column "external ")
  ("&"   projectile-run-async-shell-command-in-root "shell &       "                    )
  ("a"   helm-projectile-ag                         "ag            "                    )
  ("C-a" projectile-ag                              nil                                 )
  ("c"   helm-projectile-ack                        "ack           "                    )
  ("C-c" projectile-ack                             nil                                 )
  ;; helm-projectile-browse-dirty-projects
  ;; C-c p V         projectile-browse-dirty-projects
  ;; C-c p c         projectile-compile-project
  ;; C-c p I         projectile-ibuffer
  ;; C-c p S         projectile-save-project-buffers
  ;; C-c p j         projectile-find-tag
  ;; C-c p R         projectile-regenerate-tags
  ;; C-c p i         projectile-invalidate-cache
  ;; C-c p z         projectile-cache-current-file
  ("q" pkg/hydra/quit nil :exit t))
