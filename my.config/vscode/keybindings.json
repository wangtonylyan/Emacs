[
    {
        "command": "-workbench.action.newWindow",
        "key": "ctrl+shift+n"
    },
    {
        "command": "-workbench.action.newWindow",
        "key": "ctrl+x ctrl+n",
        "when": "!terminalFocus"
    },
    {
        "command": "-workbench.action.files.newUntitledFile",
        "key": "ctrl+n"
    },
    {
        "command": "-welcome.showNewFileEntries",
        "key": "ctrl+alt+win+n"
    },
    {
        "command": "-editor.action.triggerSuggest",
        "key": "ctrl+space",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "command": "-toggleSuggestionDetails",
        "key": "ctrl+space",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "command": "-toggleSuggestionFocus",
        "key": "ctrl+alt+space",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "command": "-editor.action.triggerSuggest",
        "key": "ctrl+oem_7",
        "when": "editorTextFocus"
    },
    {
        "command": "-toggleSuggestionDetails",
        "key": "ctrl+oem_7",
        "when": "editorTextFocus && suggestWidgetVisible"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "command": "-git.stageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+k ctrl+n",
        "command": "-git.unstageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-git.revertSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k m",
        "command": "-workbench.action.editor.changeLanguageMode",
        "when": "!notebookEditorFocused"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k e",
        "command": "-workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "ctrl+k c",
        "command": "-workbench.files.action.compareWithClipboard"
    },
    {
        "key": "ctrl+k d",
        "command": "-workbench.files.action.compareWithSaved"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "command": "-copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+k o",
        "command": "-workbench.action.files.showOpenedFileInNewWindow",
        "when": "emptyWorkspaceSupport"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openFolder",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "-workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "ctrl+k ctrl+0",
        "command": "-editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+oem_2",
        "command": "-editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+8",
        "command": "-editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+oem_minus",
        "command": "-editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+1",
        "command": "-editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+2",
        "command": "-editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+3",
        "command": "-editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+4",
        "command": "-editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+5",
        "command": "-editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+6",
        "command": "-editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+7",
        "command": "-editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+oem_4",
        "command": "-editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+q",
        "command": "-workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+k v",
        "command": "-markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+k ctrl+d",
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-notebook.cell.collapseCellInput",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-notebook.cell.expandCellInput",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+k ctrl+shift+oem_5",
        "command": "-notebook.cell.split",
        "when": "notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "key": "ctrl+k f12",
        "command": "-editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "ctrl+k ctrl+s",
        "command": "-workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "-editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+k",
        "command": "-code-runner.runCustomCommand"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "ctrl+k ctrl+b",
        "command": "-editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+l",
        "command": "-editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+x",
        "command": "-editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+j",
        "command": "-editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+9",
        "command": "-editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+oem_plus",
        "command": "-editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+oem_6",
        "command": "-editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+shift+w",
        "command": "-workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k down",
        "command": "-views.moveViewDown",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k left",
        "command": "-views.moveViewLeft",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k right",
        "command": "-views.moveViewRight",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k up",
        "command": "-views.moveViewUp",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k p",
        "command": "-workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openLocalFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k r",
        "command": "-workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+k f2",
        "command": "-togglePeekWidgetFocus",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "ctrl+k s",
        "command": "-saveAll"
    },
    {
        "key": "ctrl+k ctrl+e",
        "command": "-keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+k ctrl+a",
        "command": "-keybindings.editor.addKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+k enter",
        "command": "-workbench.action.keepEditor"
    },
    {
        "key": "ctrl+k down",
        "command": "-workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "ctrl+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k right",
        "command": "-workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "ctrl+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+k ctrl+pagedown",
        "command": "-workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+k ctrl+pageup",
        "command": "-workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+k ctrl+shift+oem_5",
        "command": "-workbench.action.splitEditorInGroup",
        "when": "activeEditorCanSplitInGroup"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "ctrl+k z",
        "command": "-workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "ctrl+k f",
        "command": "-workbench.action.closeFolder",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-editor.action.defineKeybinding",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'"
    },
    {
        "key": "ctrl+k u",
        "command": "-workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+k ctrl+down",
        "command": "-workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+k ctrl+shift+oem_5",
        "command": "-workbench.action.joinEditorInGroup",
        "when": "sideBySideEditorActive"
    },
    {
        "key": "ctrl+k w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+x ctrl+u",
        "command": "undo",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+space",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+shift+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+shift+backspace",
        "command": "-search.searchEditor.action.deleteFileResults",
        "when": "inSearchEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "ctrl+h",
        "command": "-deleteLeft",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+shift+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+w",
        "command": "-closeFindWidget",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "ctrl+h",
        "command": "expand_region",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-expand_region",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+h",
        "command": "undo_expand_region",
        "when": "editorHasSelection && editorTextFocus"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-undo_expand_region",
        "when": "editorHasSelection && editorTextFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleSearchWholeWord",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+w",
        "command": "-workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+j",
        "command": "-closeFindWidget",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-workbench.action.search.toggleQueryDetails",
        "when": "inSearchEditor || searchViewletFocus"
    },
    {
        "key": "ctrl+alt+j",
        "command": "-code-runner.runByLanguage"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "-emacs-mcx.newLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+backspace",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+backspace",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellType == 'cmd'"
    },
    {
        "key": "alt+m",
        "command": "-emacs-mcx.backToIndentation",
        "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
    },
    {
        "key": "alt+m",
        "command": "-emacs-mcx.backToIndentation",
        "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorTextFocus"
    },
    {
        "key": "ctrl+oem_2",
        "command": "-undo",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+oem_minus",
        "command": "-undo",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+y",
        "command": "-redo"
    },
    {
        "key": "ctrl+u",
        "command": "-cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+y",
        "command": "-workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "ctrl+shift+2",
        "command": "-emacs-mcx.setMarkCommand",
        "when": "editorTextFocus"
    },
    {
        "key": "escape space",
        "command": "-emacs-mcx.setMarkCommand",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus"
    },
    {
        "key": "ctrl+shift+space",
        "command": "emacs-mcx.setMarkCommand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+space",
        "command": "-emacs-mcx.setMarkCommand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_4 l",
        "command": "-emacs-mcx.transformToLowercase",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape l",
        "command": "-emacs-mcx.transformToLowercase",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+x ctrl+l",
        "command": "-emacs-mcx.transformToLowercase",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+x ctrl+u",
        "command": "-emacs-mcx.transformToUppercase",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape u",
        "command": "-emacs-mcx.transformToUppercase",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+oem_4 u",
        "command": "-emacs-mcx.transformToUppercase",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape c",
        "command": "-emacs-mcx.transformToTitlecase",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+oem_4 c",
        "command": "-emacs-mcx.transformToTitlecase",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+p",
        "command": "-keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings"
    },
    {
        "key": "alt+p",
        "command": "-togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "alt+p",
        "command": "-toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+p",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+r",
        "command": "-toggleSearchRegex",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+c",
        "command": "-toggleSearchCaseSensitive",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+r",
        "command": "-toggleSearchEditorRegex",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+c",
        "command": "-toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+l",
        "command": "-toggleSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+n",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+n",
        "command": "-emacs-mcx.addSelectionToNextFindMatch",
        "when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
    },
    {
        "key": "ctrl+alt+n",
        "command": "-emacs-mcx.addSelectionToNextFindMatch",
        "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorFocus"
    },
    {
        "key": "escape ctrl+n",
        "command": "-emacs-mcx.addSelectionToNextFindMatch",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorFocus"
    },
    {
        "key": "ctrl+oem_4 ctrl+n",
        "command": "-emacs-mcx.addSelectionToNextFindMatch",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorFocus"
    },
    {
        "key": "ctrl+alt+p",
        "command": "-emacs-mcx.addSelectionToPreviousFindMatch",
        "when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
    },
    {
        "key": "ctrl+alt+p",
        "command": "-emacs-mcx.addSelectionToPreviousFindMatch",
        "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorFocus"
    },
    {
        "key": "escape ctrl+p",
        "command": "-emacs-mcx.addSelectionToPreviousFindMatch",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorFocus"
    },
    {
        "key": "ctrl+oem_4 ctrl+p",
        "command": "-emacs-mcx.addSelectionToPreviousFindMatch",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorFocus"
    },
    {
        "key": "ctrl+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-editor.action.replaceAll",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-search.action.replaceAll",
        "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
    },
    {
        "key": "ctrl+alt+n",
        "command": "-code-runner.run"
    },
    {
        "key": "ctrl+alt+m",
        "command": "-code-runner.stop"
    },
    {
        "key": "alt+oem_period",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "alt+oem_comma",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "alt+oem_period",
        "command": "-metaGo.gotoAfter"
    },
    {
        "key": "alt+oem_comma",
        "command": "-metaGo.gotoBefore"
    },
    {
        "key": "alt+oem_2",
        "command": "-metaGo.gotoSmart"
    },
    {
        "key": "ctrl+alt+oem_period",
        "command": "-metaGo.addCursorAfter"
    },
    {
        "key": "ctrl+alt+oem_comma",
        "command": "-metaGo.addCursorBefore"
    },
    {
        "key": "ctrl+alt+oem_2",
        "command": "-metaGo.addCursorSmart"
    },
    {
        "key": "alt+delete",
        "command": "-metaGo.metaJump.deleteToAfter",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+backspace",
        "command": "-metaGo.metaJump.deleteToBefore",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+d",
        "command": "-metaGo.metaJump.deleteToSmart",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+space",
        "command": "-metaGo.metaJump.hideDecoration",
        "when": "editorTextFocus && metaGoJumping"
    },
    {
        "key": "shift+alt+oem_period",
        "command": "-metaGo.selectAfter",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+oem_comma",
        "command": "-metaGo.selectBefore",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+oem_2",
        "command": "-metaGo.selectSmart",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+p",
        "command": "-metaGo.inSurroundingPairSelection",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+p",
        "command": "-metaGo.changeSurroundingPair",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+left",
        "command": "-metaGo.cursorSpaceWordLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+backspace",
        "command": "-metaGo.cursorSpaceWordLeftDelete",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+left",
        "command": "-metaGo.cursorSpaceWordLeftSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+right",
        "command": "-metaGo.cursorSpaceWordRight",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+delete",
        "command": "-metaGo.cursorSpaceWordRightDelete",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+right",
        "command": "-metaGo.cursorSpaceWordRightSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+backspace",
        "command": "-metaGo.cursorSpaceWordSpaceLeftDelete",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+delete",
        "command": "-metaGo.cursorSpaceWordSpaceRightDelete",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+end",
        "command": "-metaGo.gotoEmptyLineDown",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+b",
        "command": "-metaGo.scrollCurrentLineToBottom",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+m",
        "command": "-metaGo.scrollCurrentLineToMiddle",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+t",
        "command": "-metaGo.scrollCurrentLineToTop",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+end",
        "command": "-metaGo.selectEmptyLineDown",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+home",
        "command": "-metaGo.gotoEmptyLineUp",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+home",
        "command": "-metaGo.selectEmptyLineUp",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+l",
        "command": "-metaGo.selectLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+o",
        "command": "-metaGo.selectLineUp",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "alt+win+home",
        "command": "-metaGo.cursorSpaceWordSpaceLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+home",
        "command": "-metaGo.cursorSpaceWordSpaceLeftSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+end",
        "command": "-metaGo.cursorSpaceWordSpaceRight",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+end",
        "command": "-metaGo.cursorSpaceWordSpaceRightSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+p",
        "command": "-metaGo.inSurroundingPairSelectionWithPairs",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+oem_5",
        "command": "-metaGo.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+j",
        "command": "metaGo.gotoSmartActive"
    },
    {
        "key": "ctrl+shift+j",
        "command": "metaGo.selectSmart"
    },
    {
        "key": "ctrl+x ctrl+x",
        "command": "metaGo.selectionSwitchActiveWithAnchor",
        "when": "editorHasSelection && editorTextFocus"
    },
    {
        "key": "alt+a",
        "command": "-metaGo.selectionSwitchActiveWithAnchor",
        "when": "editorHasSelection && editorTextFocus"
    }
]