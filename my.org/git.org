#+TITLE: Main
* Network

** terminology

*** address

+ address realm :: a network domain in which the network addresses are uniquely assigned to entities such that datagrams can be routed to them.

**** categorized by layer

+ IP address :: an IP-layer identifier for an interface or a set of interfaces.

+ link-layer address :: a link-layer identifier for an interface.

 Examples include IEEE 802 addresses for Ethernet links (e.g. EHA) and E.164 addresses for Integrated Services Digital Network (ISDN) links.

 Typically, the link-layer address is an interface’s Media Access Control (MAC) address.

**** categorized by realm

+ link-local address :: an address having link-only scope that can be used to reach neighboring nodes attached to the same link.

 All interfaces have a link-local unicast address.

+ global address :: an address with unlimited scope.

+ unicast address :: an identifier for a single interface.

 A packet sent to a unicast address is delivered to the interface identified by that address.

+ multicast address :: an identifier for a set of interfaces (typically belonging to different nodes).

 A packet sent to a multicast address is delivered to all interfaces identified by that address.

+ anycast address :: an identifier for a set of interfaces (typically belonging to different nodes).

 A packet sent to an anycast address is delivered to one of the interfaces identified by that address (the "nearest" one, according to the routing protocol’s measure of distance).

**** categorized by state

+ tentative address :: an address whose uniqueness on a link is being verified, prior to its assignment to an interface.

 A tentative address is not considered assigned to an interface in the usual sense.
 An interface discards received packets addressed to a tentative address, but accepts Neighbor Discovery packets related to Duplicate Address Detection for the tentative address.

+ preferred address :: an address assigned to an interface whose use by upper-layer protocols is unrestricted.

 Preferred addresses may be used as the source (or destination) address of packets sent from (or to) the interface.

  + preferred lifetime :: the length of time that a valid address is preferred (i.e. the time until deprecation)

   When the preferred lifetime expires, the address becomes deprecated.

+ deprecated address :: an address assigned to an interface whose use is discouraged, but not forbidden.

 A deprecated address should no longer be used as a source address in new communications, but packets sent from or to deprecated addresses are delivered as expected.
 A deprecated address may continue to be used as a source address in communications where switching to a preferred address causes hardship to a specific upper-layer activity (e.g., an existing TCP connection).

+ valid address :: a preferred or deprecated address.

 A valid address may appear as the source or destination address of a packet, and the Internet routing system is expected to deliver packets sent to a valid address to their intended recipients.

  + valid lifetime :: the length of time an address remains in the valid state (i.e. the time until invalidation)

   The valid lifetime must be greater than or equal to the preferred lifetime.
   When the valid lifetime expires, the address becomes invalid.

+ invalid address :: an address that is not assigned to any interface.

 A valid address becomes invalid when its valid lifetime expires.

 Invalid addresses should not appear as the destination or source address of a packet.
 In the former case, the Internet routing system will be unable to deliver the packet; in the latter case, the recipient of the packet will be unable to respond to it.

*** device

+ node :: a device that implements IPv6.

+ router :: a node that forwards IPv6 packets not explicitly addressed to itself.

+ host :: any node that is not a router.

+ end ::

+ neighbor :: nodes attached to the same link.

+ interface :: a node’s attachment to a link.

+ link MTU :: the maximum transmission unit, i.e., maximum packet size in octets, that can be conveyed over a link.

+ path MTU :: the minimum link MTU of all the links in a path between a source node and a destination node.

+ session :: a set of traffic that is managed as a unit.

+ session/connection flow :: 由多个packet flow组成，由谁首先发起连接请求，来决定flow的方向

+ packet flow :: 其方向为单个packet的传输方向

**** link layer

+ link :: A facility or medium over which nodes can communicate at the link layer.

+ switch ::

+ hub ::

+ repeater ::

+ bridge :: A node connected to two or more administratively indistinguishable but physically distinct subnets, that automatically forwards datagrams when necessary, but whose existence is not known to other hosts.

 Also called a "software repeater".

**** network layer

+ gateway :: A node connected to two or more administratively distinct networks and/or subnets, to which hosts send datagrams to be forwarded.

  1. A gateway implements internet protocol to forward datagrams between networks.

  2. A gateway also implements the Gateway to Gateway Protocol (GGP) to coordinate routing and other internet control information.

+ router ::

* Git
** config
*** basic
**** local *vs.* global
前者作为缺省值；这两个参数可以与以下各子命令结合使用
#+begin_src sh
git config --local   # "./.git/config"
git config --global  # "~/.gitconfig"
#+end_src
**** list
#+begin_src sh
git config --list
#+end_src
**** unset
#+begin_src sh
git config --unset
#+end_src
*** account
**** user info
#+begin_src sh
git config user.name "TonyLYan"
git config user.email "wangtonylyan@outlook.com"
#+end_src
**** credential
设置以下选项后的首次git push时所输入的用户名和Token密码，将被自动地以明文的方式，保存于~/.git-credentials文件中
当启用Github账号登陆二次验证机制时，通过命令行执行push等操作时，要求输入的账号密码必须是由官网上手动生成的Personal Access Token，而非账号的登陆密码。此时，将密码自动保存于本地就是一个很好的举措
#+begin_src sh
git config credential.helper store
#+end_src
*** network
**** proxy
#+begin_src sh
git config http.proxy "http://<username>:<password>@<server>:<port>"
git config https.proxy "https://<username>:<password>@<server>:<port>"
#+end_src
**** ssl
#+begin_src sh
git config http.sslverify false  # 用于解决server certificate verification failed错误
#+end_src
*** alias
#+begin_src sh
git config alias.st status
git config alias.br branch
git config alias.co checkout
git config alias.cm commit
git config alias.rs reset
#+end_src
*** core
**** newline
#+begin_src sh
git config core.autocrlf input  # 用于转换\r\n与\n，在Linux和Windows上的值分别应为input和true
#+end_src
** submodule
*** initialize
+ 在首先克隆一个仓库后，只会存在有子模块的文件夹，而不会下载其代码
+ 子模块作为一个独立的仓库，也需要进行初始化
**** 克隆仓库的同时，初始化子模块
#+begin_src sh
git clone --recurse-submodules
#+end_src
**** 克隆仓库后，初始化子模块
#+begin_src sh
git submodule init
git submodule update
#+end_src
#+begin_src sh
git submodule update --init
#+end_src
*** update
+ 子模块的相关操作需要在其目录下执行
**** fetch and merge
#+begin_src sh
git submodule update --remote
#+end_src

* Org-Mode
** misc
*** tags
expense, self, work, math, cs
*** 新建一个标题行，可以在一个空行上输入一个星号，随后不要输入标题的内容，而是使用tab键切换标题行深度
*** 在tag前面输入<return>并不会导致标签内容也同样换行

** general
*** Ctrl-C Ctrl-C
+ tag :: 在headline上执行可以修改tag
+ timestamp :: normalize timestamp, fixing format
*** help
+ "C-c C-x I" :: open a suitable section of the Org manual depending on the syntax at point

** agenda
*** basic
+ "/" :: filter by tag
+ "-" :: filter out by tag

** structure template
*** create
+ "C-c C-," :: choose and insert templates

** source code block
*** edit
+ "C-c '" :: edit code block in a editing window, or return
+ "C-x C-s" :: save the block to base buffer
+ "C-c C-v v" :: view src block in a editing window
*** tangle
+ "C-c C-v t" :: tangle the current file
+ "C-c C-v f" :: choose a file to tangle
*** evaluation
+ "C-c C-c", "C-c C-v e" :: evaluate the block at point
+ "C-c C-o", "C-c C-v o" :: open result in a new window
*** navigation
+ "C-c C-v C-p", "C-c C-v C-n" :: previous/next src block
+ "C-c C-v C-u" :: goto src block head
*** help
+ "C-c C-v C-h" :: describe key bindings
+ "C-c C-v C-I" :: view src block info
+ "C-c C-v C-a" :: get SHA1 value
** speed command
point must be at the beginning of a headline
*** outline navigation
+ "n, p, f, b" :: "C-c C-"
+ "j" :: "C-c C-"
*** outline cycle
+ "c, C" :: "<tab>", "<backtab>"
*** todo
+ "t" ::
*** help
+ "?" :: describe key bindings
