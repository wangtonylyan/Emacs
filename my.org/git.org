#+TITLE: Main
* Network

** terminology

*** address

+ address realm :: a network domain in which the network addresses are uniquely assigned to entities such that datagrams can be routed to them.

**** categorized by layer

+ IP address :: an IP-layer identifier for an interface or a set of interfaces.

+ link-layer address :: a link-layer identifier for an interface.

 Examples include IEEE 802 addresses for Ethernet links (e.g. EHA) and E.164 addresses for Integrated Services Digital Network (ISDN) links.

 Typically, the link-layer address is an interface’s Media Access Control (MAC) address.

**** categorized by realm

+ link-local address :: an address having link-only scope that can be used to reach neighboring nodes attached to the same link.

 All interfaces have a link-local unicast address.

+ global address :: an address with unlimited scope.

+ unicast address :: an identifier for a single interface.

 A packet sent to a unicast address is delivered to the interface identified by that address.

+ multicast address :: an identifier for a set of interfaces (typically belonging to different nodes).

 A packet sent to a multicast address is delivered to all interfaces identified by that address.

+ anycast address :: an identifier for a set of interfaces (typically belonging to different nodes).

 A packet sent to an anycast address is delivered to one of the interfaces identified by that address (the "nearest" one, according to the routing protocol’s measure of distance).

**** categorized by state

+ tentative address :: an address whose uniqueness on a link is being verified, prior to its assignment to an interface.

 A tentative address is not considered assigned to an interface in the usual sense.
 An interface discards received packets addressed to a tentative address, but accepts Neighbor Discovery packets related to Duplicate Address Detection for the tentative address.

+ preferred address :: an address assigned to an interface whose use by upper-layer protocols is unrestricted.

 Preferred addresses may be used as the source (or destination) address of packets sent from (or to) the interface.

  + preferred lifetime :: the length of time that a valid address is preferred (i.e. the time until deprecation)

   When the preferred lifetime expires, the address becomes deprecated.

+ deprecated address :: an address assigned to an interface whose use is discouraged, but not forbidden.

 A deprecated address should no longer be used as a source address in new communications, but packets sent from or to deprecated addresses are delivered as expected.
 A deprecated address may continue to be used as a source address in communications where switching to a preferred address causes hardship to a specific upper-layer activity (e.g., an existing TCP connection).

+ valid address :: a preferred or deprecated address.

 A valid address may appear as the source or destination address of a packet, and the Internet routing system is expected to deliver packets sent to a valid address to their intended recipients.

  + valid lifetime :: the length of time an address remains in the valid state (i.e. the time until invalidation)

   The valid lifetime must be greater than or equal to the preferred lifetime.
   When the valid lifetime expires, the address becomes invalid.

+ invalid address :: an address that is not assigned to any interface.

 A valid address becomes invalid when its valid lifetime expires.

 Invalid addresses should not appear as the destination or source address of a packet.
 In the former case, the Internet routing system will be unable to deliver the packet; in the latter case, the recipient of the packet will be unable to respond to it.

*** device

+ node :: a device that implements IPv6.

+ router :: a node that forwards IPv6 packets not explicitly addressed to itself.

+ host :: any node that is not a router.

+ end ::

+ neighbor :: nodes attached to the same link.

+ interface :: a node’s attachment to a link.

+ link MTU :: the maximum transmission unit, i.e., maximum packet size in octets, that can be conveyed over a link.

+ path MTU :: the minimum link MTU of all the links in a path between a source node and a destination node.

+ session :: a set of traffic that is managed as a unit.

+ session/connection flow :: 由多个packet flow组成，由谁首先发起连接请求，来决定flow的方向

+ packet flow :: 其方向为单个packet的传输方向

**** link layer

+ link :: A facility or medium over which nodes can communicate at the link layer.

+ switch ::

+ hub ::

+ repeater ::

+ bridge :: A node connected to two or more administratively indistinguishable but physically distinct subnets, that automatically forwards datagrams when necessary, but whose existence is not known to other hosts.

 Also called a "software repeater".

**** network layer

+ gateway :: A node connected to two or more administratively distinct networks and/or subnets, to which hosts send datagrams to be forwarded.

  1. A gateway implements internet protocol to forward datagrams between networks.

  2. A gateway also implements the Gateway to Gateway Protocol (GGP) to coordinate routing and other internet control information.

+ router ::

** Computer Networking: A Top-Down Approach

*** Chapter 4. The Network Layer
**** routing protocol
+ Internet’s intra-autonomous system routing protocols :: RIP, OSPF, and IS-IS
+ Internet's inter-autonomous system routing protocol :: BGP
**** packet
|-----------+----------|
| layer     | packet   |
|-----------+----------|
| transport | segment  |
| network   | datagram |
| link      | frame    |
**** forwarding =vs.= routing
Forwarding refers to the router-local action of transferring a packet from an input link interface to the appropriate output link interface.
Routing refers to the network-wide process that determines the end-to-end paths that packets take from source to destination.
**** forwarding table
路由器内部会维护一张forwarding table，从而实现forwarding功能
**** network service model
***** Internet
best-effort service
***** ATM
provides multiple service models
+ constant bit rate (CBR) :: a dedicated fixed-bandwidth transmission link
+ available bit rate (ABR) :: slightly-better-than-best-effort service
**** network-layer connection and connectionless service
Although the connection and connectionless services at network layer have some parallels with those at transport layer, there are differences as follows,
|--------------------------------------------------------+--------------------------------------------------------------------|
| transport layer                                        | network layer                                                      |
|--------------------------------------------------------+--------------------------------------------------------------------|
| process-to-process                                     | host-to-host                                                       |
| can provice both connection and connectionless service | virtual-circuit xor datagram                                       |
| Connection service is implemented in end systems only. | Connection service is implemented in both routers and end systems. |
**** virtual-circuit network
1. A computer network that provides only a connection or connectionless service at the network layer is called a *virtual-circuit* network or *datagram* network, respectively.
2. The network-layer connection is called *virtual circuit* (VC).
3. The network's routers must maintain *connection state information* for the ongoing connections.
 对于VC而言，其连接的建立涉及到了整条路径上的每一台设备，所有中间路由都需要为每个连接维护单独的信息。


* Docker
** references
[[http://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/][RUN vs. CMD vs. ENTRYPOINT]]

** concept
1. An *image* is an executable package that includes everything needed to run an application, including the code, a runtime, libraries, environment variables, and configuration files.
2. A *container* is a runtime instance of an image, i.e. what the image becomes in memory when executed.
 *Dockerfile*与container一一绑定
3. docker engine = docker + dockerd
 服务器端是一个名为dockerd的daemon进程，客户端则是每次执行docker命令时所起的进程，两者之间通过REST API进行通信。
 由于镜像、容器等的维护都被执行于该daemon中，因此客户端也可以通过网络，远程控制另一台主机中的docker engine。
 目前dockerd还提供了分布式模型，多个daemon可以组成集群，用户可对负载、资源占用等进行配置。
4. 构建镜像时需要指定目录，该被指定目录被称为是context，即被Docker认为是对于本次构建有用的信息，
 因而该目录下的所有文件都会在Docker客户端执行"docker build"命令时，被完整地传给dockerd进程。
   + 可见，出于执行效率的考虑，每次构建镜像时，通常都需要新建一个空目录，仅将对本次构建真正有必要的文件置于其中；
     此外，也可以在被指定的目录下新建.dockerignore文件，用于指定需要被忽略的内容。
5. Dockerfile的语法规则可参见[[https://docs.docker.com/engine/reference/builder/][此网页]]
6. layer
 In an image, a layer is modification to the image, represented by an instruction in the Dockerfile.
 Layers are applied in sequence to the base image to create the final image.
** configuration
*** config file
1. /etc/default/docker，该文件不支持systemctl所管理的dockerd进程
2. /etc/docker/daemon.json

** install
1. Docker的安装可直接参考[[https://docs.docker.com/install/linux/docker-ce/ubuntu/][官方文档]]
2. 增加非root权限
 #+begin_src sh
sudo groupadd docker
sudo usermod -aG docker $USER
 #+end_src
3. 开机启动
 #+begin_src sh
sudo systemctl enable docker
 #+end_src
** command
*** CLI commands
#+begin_src sh
docker
docker container --help
#+end_src
*** info
#+begin_src sh
docker --version
docker version
docker info
#+end_src
*** hub
#+begin_src sh
docker login                                      # Log in this CLI session using your Docker credentials
docker tag <image> <username>/<repository>:<tag>  # Tag image for upload to registry
docker push <username>/<repository>:<tag>         # Upload tagged image to registry
docker pull <username>/<repository>:<tag>
docker search <image>
#+end_src
*** image
1. 在DockerHub中，一个镜像的完整标示符的格式是"<username>/<repository>:<tag>"，其中
   + 没有username的镜像属于顶级命名空间，仅用于官方镜像

#+begin_src sh
docker image ls
docker image ls -a                        # List all images on this machine
docker image rm <image>                   # Remove specified image from this machine
docker image rm $(docker image ls -a -q)  # Remove all images from this machine
docker build -t <image> .                 # Create image using the Dockerfile in current directory
#+end_src
*** container
#+begin_src sh
docker ps  # docker container ls
docker ps -a  # docker container ls -a

docker stop <hash>  # docker container stop <hash>
docker kill <hash>  # docker container kill <hash>

docker rm <hash>  # docker container rm <hash>
docker rm $(docker ps -a -q -f status=exited)  # Remove all exited containers
#+end_src
*** run -- the most mighty command
#+begin_src sh
docker run <image>
docker run -p 4000:80 <image>             # Run image mapping port 4000 to 80，两者分别是主机和容器内的端口号
docker run -d -p 4000:80 <image>          # Same thing, but in detached mode
docker run <username>/<repository>:<tag>  # Run image from a registry
docker run -it <image>                    # attach to an interactive tty in container
#+end_src


*** example
#+begin_src sh
docker pull busybox
docker image ls
docker run busybox
docker container ls -a
docker run -it busybox sh
#+end_src

* shell
** color
#+begin_src sh
tput color
#+end_src

* tmux
** commands
*** session
#+begin_src sh
tmux new -s <session>  # tmux new-session -s <session>
tmux ls  # tmux list-sessions
tmux attach -t <session> # tmux attach-session -t <session>
tmux kill-session -t <session>
#+end_src
*** configuration in tmux.conf file
#+begin_src sh
set-option  # set
set-window-option  # setw
#+end_src
*** tmux command
#+begin_src sh
source-file ~/.tmux.conf
#+end_src

** key bindings
+ t :: clock
+ d :: detach current session
+ , :: (re)name window
+ [0-9] :: jump to window, "C-x b"
+ w :: visual menu of windows
+ f :: find a window
+ & :: kill a window
+ % :: "C-x 3"
+ " :: "C-x 2"
+ o :: "C-x o"
+ x :: close a pane
+ : :: command mode
+ ? :: key bindings



* Git
** Magit
*** merge
合并时若存在冲突，在存在冲突的文件名所在行，执行"Ediff (dwim)"命令即可使用Ediff工具对冲突的内容进行比较呈现。
此时通常会呈现出三个不同子窗口，编号为"a"和"b"的两个窗口是两个不同版本的内容，编号为"c"的窗口则是合并执行后的结果。
处理完成后，执行"q"退出ediff会话时，会提示是否保存合并后的结果。

** config
*** basic
**** local *vs.* global
前者作为缺省值；这两个参数可以与以下各子命令结合使用
#+begin_src sh
git config --local   # "./.git/config"
git config --global  # "~/.gitconfig"
#+end_src
**** list
#+begin_src sh
git config --list
#+end_src
**** unset
#+begin_src sh
git config --unset
#+end_src
*** account
**** user info
#+begin_src sh
git config user.name "TonyLYan"
git config user.email "wangtonylyan@outlook.com"
#+end_src
**** credential
设置以下选项后的首次git push时所输入的用户名和Token密码，将被自动地以明文的方式，保存于~/.git-credentials文件中
当启用Github账号登陆二次验证机制时，通过命令行执行push等操作时，要求输入的账号密码必须是由官网上手动生成的Personal Access Token，而非账号的登陆密码。此时，将密码自动保存于本地就是一个很好的举措
#+begin_src sh
git config credential.helper store
#+end_src
*** network
**** proxy
#+begin_src sh
git config http.proxy "http://<username>:<password>@<server>:<port>"
git config https.proxy "https://<username>:<password>@<server>:<port>"
#+end_src
**** ssl
#+begin_src sh
git config http.sslverify false  # 用于解决server certificate verification failed错误
#+end_src
*** alias
#+begin_src sh
git config alias.st status
git config alias.br branch
git config alias.co checkout
git config alias.cm commit
git config alias.rs reset
#+end_src
*** core
**** newline
#+begin_src sh
git config core.autocrlf input  # 用于转换\r\n与\n，在Linux和Windows上的值分别应为input和true
#+end_src
** submodule
*** initialize
+ 在首先克隆一个仓库后，只会存在有子模块的文件夹，而不会下载其代码
+ 子模块作为一个独立的仓库，也需要进行初始化
**** 克隆仓库的同时，初始化子模块
#+begin_src sh
git clone --recurse-submodules
#+end_src
**** 克隆仓库后，初始化子模块
#+begin_src sh
git submodule init
git submodule update
#+end_src
#+begin_src sh
git submodule update --init
#+end_src
*** update
+ 子模块的相关操作需要在其目录下执行
**** fetch and merge
#+begin_src sh
git submodule update --remote
#+end_src

* Org-Mode
** misc
*** tags
expense, self, work, math, cs
*** 新建一个标题行，可以在一个空行上输入一个星号，随后不要输入标题的内容，而是使用tab键切换标题行深度
*** 在tag前面输入<return>并不会导致标签内容也同样换行

** general
*** Ctrl-C Ctrl-C
+ tag :: 在headline上执行可以修改tag
+ timestamp :: normalize timestamp, fixing format
*** help
+ "C-c C-x I" :: open a suitable section of the Org manual depending on the syntax at point

** agenda
*** basic
+ "/" :: filter by tag
+ "-" :: filter out by tag

** structure template
*** create
+ "C-c C-," :: choose and insert templates

** source code block
*** edit
+ "C-c '" :: edit code block in a editing window, or return
+ "C-x C-s" :: save the block to base buffer
+ "C-c C-v v" :: view src block in a editing window
*** tangle
+ "C-c C-v t" :: tangle the current file
+ "C-c C-v f" :: choose a file to tangle
*** evaluation
+ "C-c C-c", "C-c C-v e" :: evaluate the block at point
+ "C-c C-o", "C-c C-v o" :: open result in a new window
*** navigation
+ "C-c C-v C-p", "C-c C-v C-n" :: previous/next src block
+ "C-c C-v C-u" :: goto src block head
*** help
+ "C-c C-v C-h" :: describe key bindings
+ "C-c C-v C-I" :: view src block info
+ "C-c C-v C-a" :: get SHA1 value
** speed command
point must be at the beginning of a headline
*** outline navigation
+ "n, p, f, b" :: "C-c C-"
+ "j" :: "C-c C-"
*** outline cycle
+ "c, C" :: "<tab>", "<backtab>"
*** todo
+ "t" ::
*** help
+ "?" :: describe key bindings

* Compilation
** linker
+ ld :: link editor
 以relocatable object为输入，输出为以下四种
 + relocatable object :: a concatenation of input relocatable objects that can be used in subsequent link phases
 + static executable :: all symbolic references resolved
 + dynamic executable :: depend on shared objects
 + shared object ::

+ ld.so :: runtime linker
+ .so :: shared object
+ nil :: object file, ELF


** *static library* vs. *dynamic library*
*** static linking
+ .a :: archive
+ 链接库集成于可执行文件中，导致可执行文件独立但较大
 而如果一个链接库代码量过小，则将其作为动态链接库反而可能浪费内存。
 因为系统对于每个链接库元信息的维护，以及将其加载后进行的内存对齐操作，都可能导致"得不偿失"。
+ 在每次编译后都需要对链接库进行重新链接，从而增加了编译所需的时间开销
*** dynamic linking
+ .so :: shared object
+ 编译生成一个动态链接库时
  - 不能直接链接普通的静态链接库，而是要链接名字中以"S.a"结尾的静态链接库，
    后者的存在与其自身所在文件路径无关
  - 推荐尽量链接动态链接库
+ 可执行文件与链接库的编译过程相互独立
+ 需要系统级支持
 通常在编译器生成可执行文件时，就会向系统注册相应的链接库信息。
 当运行可执行文件时，系统的进程管理模块，会首先将所需链接库加载至内存中，随后才会加载该可执行文件。
  - runtime loading
   动态链接的变种
   由可执行文件主动调用系统提供的dlopen()函数，在运行时动态地触发对应链接库的加载
** gcc
+ -D :: feature-test macros
+ -l :: link static/dynamic library


** make
*** Makefile
+ Makefile也有默认的的include目录，在QNX环境下其位于$QNX_TARGET/usr/include/mk。
+ Makefile.am :: Automake文件
+ Makefile.dnm :: Do Not Make




* Emacs
** install
*** 注意事项
+ 目前发现，Emacs安装包解压缩后不能放置于VMware的共享目录下，在make阶段会存在权限问题而报错。
*** essential build tools
#+begin_src sh
sudo apt install build-essential
sudo apt build-dep emacs
sudo apt install libx11-dev libgtk-3-dev
sudo apt install libgnutls28-dev libncurses5-dev
sudo apt install libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev  # pictures
sudo apt install libmagickcore-dev libmagick++-dev  # magick
sudo apt install libwebkit2gtk-4.0-dev  # xwidgets
#+end_src
*** emacs
#+begin_src sh
./configure --disable-largefile --without-sound --with-modules --with-xwidgets
make
sudo make install
#+end_src
*** personal configurations
#+begin_src sh
cd ~/Projects
git clone http://github.com/wangtonylyan/Emacs.git
ln -s ~/Projects/Emacs ~/.emacs.d
#+end_src
*** fonts
**** [[https://github.com/domtronn/all-the-icons.el][all the icons]]
**** [[https://github.com/adobe-fonts/source-code-pro/][source code pro]]
 #+begin_src sh
cd ~/Projects
git clone --branch release --depth 1 https://github.com/adobe-fonts/source-code-pro.git
ln -s ~/Projects/source-code-pro ~/.local/share/fonts/source-code-pro
cd ~/.local/share/fonts  # 该文件夹下的子目录也是有效的，字体文件未必一定要直接位于该目录下
sudo fc-cache -f -v
 #+end_src
**** [[https://github.com/wangtonylyan/Fonts][my fonts repo on github]], use "Fira Mono"
*** plugins
启动Emacs在线安装插件

* QNX
** cross compilation
qcc -V gcc_ntoarmv7le  # 指定目标系统环境
qcc -Bdynamic -l1 -l2 -Bstatic -l3 -l4 -Bdynamic -l5  # 静/动态链接外部库
# "-znow" or "-zlazy", resolve function symbols at load time or when it is first called
qcc -Wl,-znow  # "-Wl" pass option to ld

** resources
*** account
+ registered products :: https://www.qnx.com/account/index.html
+ SDP 6.6 download :: https://www.qnx.com/account/expindex.html
*** license
+ license guild :: http://licensing.qnx.com/document-archive/
*** development
+ online doc :: http://www.qnx.com/developers/docs/7.0.0/index.html#com.qnx.doc.qnxsdp.nav/topic/bookset.html
*** BSP
+ BSP directory :: http://community.qnx.com/sf/wiki/do/viewPage/projects.bsp/wiki/BSPAndDrivers
+ BSP release version :: http://community.qnx.com/sf/go/projects.bsp/frs
** concept
+ Neutrino RTOS :: 操作系统，也被称为target system。
+ Software Development Platform (SDP) :: 提供了一套交叉开发和编译环境，编译后的软件将最终部署至target system上执行。
 SDP所部署的主机被称为development host。
 主要包括了以下内容
  - QNX Neutrino RTOS components ::
  - Momentics Tool Suite :: Momentics IDE，包括于SDP中。
   includes compilers, debuggers, libraries, header files, utilities, sample source code, test suites, performance optimization tools, etc., within an integrated development environment based on the open Eclipse IDE framework.
+ Board Support Package (BSP) :: 目标开发板相关的开发工具，包括了驱动。
+ armle :: ARM chip with little-endian
+ IPL :: QNX initial program loader
+ image :: 分为bootable和nonbootable
 主要涉及了以下几种不同含义的镜像
  - OS image :: IFS (image file system)，描述了OS所需文件在文件系统中的存储布局
   OS镜像的具体细节，通常会由一个build文件进行描述
  - flash file system image :: EFS (embedded file system)，可供OS访问的嵌入式文件系统
  - startup/boot image :: 将IPL和OS镜像打包在一起的bootable镜像
** SDP
*** install
**** 安装所需系统库
#+begin_src sh
sudo dpkg --add-architecture i386
sudo apt update
sudo apt install libgtk2.0-0:i386
sudo apt install libxtst6:i386 libxtst-dev:i386
sudo apt install libcanberra-gtk-module:i386
sudo apt install gtk2-engines-murrine:i386
sudo apt install libdbus-glib-1-2:i386
#+end_src
**** 安装后还需要运行以下脚本，以初始化环境变量
#+begin_src sh
# echo >> ~/.profile
if [ -f "$HOME/qnx660/qnx660-env.sh" ]; then
    . "$HOME/qnx660/qnx660-env.sh"
fi
#+end_src
***** 涉及到的环境变量有
+ 将"/home/wm/qnx660/host/linux/x86/usr/bin"将入PATH，该目录下有编译项目、构建镜像等开发工具
+ 新增环境变量"$QNX_HOST"、"$QNX_TARGET"等
**** 执行以下命令验证安装
#+begin_src sh
qconfig
#+end_src
*** host environment
**** development tools
+ mkifs, mkefs :: make image/embedded file system
+ dumpifs, dumpefs :: dump image/embedded file system information
+ mkimage :: combine multiple image files into a single one
+ mkrec :: takes a binary image file and converts it to certain format
+ objcopy ::
+ qcc :: 交叉编译器
** Freescale BSP
*** build image
注意，以下解压缩后的目录不要位于VMware的共享目录下，否则执行make等命令会导致异常。
**** 解压缩，并打补丁
#+begin_src sh
unzip BSP_freescale-imx6q-sabresmart_br-660_be-660_SVN850002_JBN1126.zip -d ./bsp
unzip BSP_freescale-imx6q-sabresmart_br-660_be-660_PATCHES_JBN1126.zip   -d ./patch
cp -r ./patch/patches/* ./bsp/prebuilt
#+end_src
**** 编译并生成OS镜像文件
#+begin_src sh
cd ./bsp
make
#+end_src
***** 上述make过程具体而言就包括了以下几个步骤
+ 利用$QNX_TARGET所指定的目标系统环境，编译OS源代码
+ 执行mkifs命令，根据./images/smart-device.build脚本，生成./images/ifs-mx6q-sabresmart.raw
**** 生成用于SD卡中、可被引导的启动镜像文件
#+begin_src sh
cd ./images
./mkflashimage  # generate ./ipl-mx6q-sabresmart.bin
cp ifs-mx6q-sabresmart.raw QNX-IFS  # IPL默认引导名为"QNX-IFS"的OS镜像
#+end_src
*** partition SD card
**** 启动fdisk工具
#+begin_src sh
sudo fdisk /dev/sdb
#+end_src
**** 使用fdisk工具格式化整个SD卡，并创建一个新的FAT分区
#+begin_src fdisk
p  # 查询SD卡当前格式化信息
u  # change default unit to cylinders
o  # create a new DOS partition table
d  # delete existing partitions
n  # add a new partition
a  # set the active partition
t  # set the partition type
w  # write all settings from memory to SD card
#+end_src
**** 格式化SD卡上的分区
#+begin_src sh
sudo mkfs.vfat -F32 dev/sdb1
#+end_src
**** 查看SD卡上的第一个分区是否已被挂在
#+begin_src sh
mount  # find the mount point of /dev/sdb1 partition, e.g. /media/wm/0D80-7256
#+end_src
若没有挂载，则可重新插拔一下SD卡
*** download image into SD card
**** 将IPL程序写入SD卡中，以便于在硬件Reset后启动，并引导IFS镜像
注意，其写入的位置是固定的，不能指定分区号。
#+begin_src sh
sudo dd if=ipl-mx6q-sabresmart.bin of=/dev/sdb bs=512 seek=2 skip=2
sync
#+end_src
**** 通过以下方式写入的OS镜像于第一个分区中
#+begin_src sh
copy ./QNX-IFS /media/wm/0D80-7256
sync
#+end_src
*** folder structure
**** prebuilt
**** install
***** armle
****** boot
******* build
+ smart-device.build :: OS image build file
******* sys
+ ipl-mx6q-sabresmart :: IPL program
+ startup-imx6x-smart-device :: startup program
**** images
+ ifs-mx6q-sabresmart.raw :: OS image file
+ ipl-mx6q-sabresmart.bin :: IPL program file, stored in target format
** license
*** development seat
1. development seat = SDP + licensed products
2. one computer used only by one individual developer to perform software development for target systems
*** named-user *vs.* floating-license
前者只能将SDP安装于一台电脑上，后者可以将SDP安装于同一组织下的多台电脑上，但同一时间只能有一台执行开发工作。
*** perpetual (paid-up license) *vs.* time limited (subscription)
*** concept
+ QNX Middleware, Runtime Component :: QNX系统由于是微内核，因此诸如内存管理、文件系统等都将作为内核之外的单独模块，
 此类模块也被称为middleware
  + 以下模块需要有独立的授权
    + QNX SDK for Apps and Media
    + QNX CAR (TM) Platform for Infotainment and QNX Acoustics Product
+ QNX Tool :: QNX Middleware Tool + QNX Momentics Tool Suite
+ QNX Product Portfolio :: Runtime Components + QNX Tools，前者是系统运行的必要组件，后者是相关的开发工具
